1.变化来了 ：
    1.我需要在方法的前后加上时间，那我就得把所有的函数上加上时间
    2.我需要在方法结束之后去提交一个事务，那所有的都得加上

    那我所有的impl里面都得去加，而且这些内容和真实的业务方法没有任何关系。

解决1：用一个utils类，把所有的非业务相关抽象成一个工具类。
        但是这样还是会调用很多次这种代码，这样会入侵我们的代码。

所以 我们得保证原有的service类不修改，也能够增加 输出时间和事务

这就引出了动态代理：

动态代理：可以在程序执行的过程中，创建代理对象
通过代理对象执行方法，给目标类的方法增加额外的功能（功能增强）

jdk动态代理实现步骤：
    1.创建目标类，SomeServiceImpl目标类，给它的doSome，doOther增加 输出时间，事务
    2.创建InvocationHandler接口的实现类， 在这个类实现给目标方法增加功能。
    3.使用jdk中 类Proxy，创建代理对象。 实现创建对象的能力。




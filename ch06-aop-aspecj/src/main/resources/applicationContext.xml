<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--把对象交给spring容器，由spring容器统一创建，管理对象-->
    <!--声明目标对象 也就是被代理类-->
    <bean id="someService" class="com.bjp.ba07.SomeServiceImpl"/>

    <!--声明切面类对象-->
    <bean id="myAspect" class="com.bjp.ba07.MyAspect"/>

    <!--申明自动代理生成器：使用aspectj框架内部的功能，创建目标对象的代理对象。
        创建代理对象是在内存中实现的，修改目标对象的内存中的结构。创建为代理对象。
        所以目标对象，就是被修改后的代理对象。看着是个目标 其实是个代理

        这个标签会把容器中所有的对象都找到，然后按照我们的切入点表达式的声明信息，找到目标，生成这个代理。
        也就是aspectj-autoproxy 会把spring容器中所有的目标对象，一次性都生成代理对象。

    -->
    <aop:aspectj-autoproxy proxy-target-class="false"/>

</beans>